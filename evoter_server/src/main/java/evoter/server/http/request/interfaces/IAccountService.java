package evoter.server.http.request.interfaces;

import java.util.Map;
import com.sun.net.httpserver.HttpExchange;

import evoter.share.dao.UserDAO;
import evoter.share.model.User;
import evoter.share.utils.URIRequest;

/**
 * Define methods to handle requests involving user account </br>
 * 
 * @author btdiem </br>
 *
 */
public interface IAccountService {

	public static final String BEAN_NAME = "accountService";
	/**
	/**
	 * Response clients a userkey generated from {@link UserDAO#USER_NAME} </br>
	 * and {@link UserDAO#PASSWORD} if username and password exist in database </br> 
	 * or response a "user not exist" message if username and password do not exist in database </br>
	 * or response a @ {@link URIRequest#FAILURE_MESSAGE } if there is an{@link Exception} </br>    
	 * 
	 * @param exchange {@link HttpExchange} communicates between server and clients </br>
	 * @param parameters contains </br> 
	 * 	UserDAO.USER_NAME </br> 
	 *  UserDAO.PASSWORD </br>
	 */
	public Object doLogin(Map<String,Object> parameters);	

	/**
	 * @return {@link URIRequest#SUCCESS_MESSAGE} if userkey value exists </br>
	 * @return{@link URIRequest#USER_NOT_EXIST_MESSAGE} if user account does not exist </br>
	 * @return {@link URIRequest#FAILURE_MESSAGE} if there is an {@link Exception}
	 * @param exchange {@link HttpExchange} communicate between clients and server </br>
	 * @param parameters contains {@link UserDAO#USER_KEY} </br>
	 */
	public Object doLogout(Map<String,Object> parameters);

	/**
	 * @return "email exists" message if there is an {@link User} found </br>
	 * @return "email does not exist" message if there is not any {@link User} found </br>
	 * @return "failure" message if there is an exception  </br>
	 * @see URIRequest#EMAIL_EXIST_MESSAGE </br>
	 * @see URIRequest#EMAIL_NOT_EXIST_MESSAGE </br>
	 * @see URIRequest#FAILURE_MESSAGE </br>

	 * @param httpExchange {@link HttpExchange} communicates between client and server </br>
	 * @param parameters contains {@link UserDAO#EMAIL} </br>
	 */
	public Object doResetPassword(Map<String, Object> parameters) ;
	/**
	 * @return a {@link URIRequest#SUCCESS_MESSAGE} if user name and password are valid </br>
	 * and a {@link User} inserted to database </br>
	 * @return {@link URIRequest#USER_EXIST_MESSAGE} if user name is found </br>
	 * @return {@link URIRequest#EMAIL_EXIST_MESSAGE} if email is found </br>
	 * @return {@link URIRequest#FAILURE_MESSAGE} if there is an exception </br>
	 * 
	 * @param httpExchange {@link HttpExchange} communicates between clients and server </br>
	 * @param parameters contains: </br>
	 * 		</li> {@link UserDAO#USER_NAME} </br>
	 * 		</li> {@link UserDAO#EMAIL} </br>
	 * 		</li> {@link UserDAO#PASSWORD} </br>
	 * 		</li> {@link UserDAO#USER_TYPE_ID} </br>
	 * 
	 */
	public Object doRegister(Map<String, Object> parameters);
	
	/**
	 * This method is called once user sends a request after he logged successfully </br>
	 * It is used to prevent hacking by someone who wants to get the data without logging </br>
	 * @param parameters contain {@link UserDAO#USER_KEY} </br>
	 * @return true if {@link UserDAO#USER_KEY} exists, otherwise return false </br>
	 */
	public  boolean hasUserKey(String userKey);
	/**
	 * Add an user key value </br>
	 * @param userKey  generated by system when user logins successfully </br>
	 */
	public void addUserKey(String userKey);
	/**
	 * Remove user key value out the system </br>
	 * @param userKey generated by system when user logins successfully </br>
	 */
	public void removeUserKey(String userKey);

}
